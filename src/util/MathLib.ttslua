do
  local MathLib = {}

  -- Rounds a number to a given number of decimal places
  ---@param num number The number to round
  ---@param numDecimalPlaces? number The number of decimal places to round to (defaults to 0)
  ---@return number: The rounded number
  function MathLib.round(num, numDecimalPlaces)
    local mult = 10 ^ (numDecimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
  end

  -- Rounds a number to the nearest multiple of a given base
  ---@param n number The number to round
  ---@param base number The base to round to the nearest multiple of
  ---@return number: The number rounded to the nearest multiple of the base
  function MathLib.roundToMultiple(n, base)
    return math.floor(n / base + 0.5) * base
  end

  -- Rounds an angle to the nearest multiple and keeps it within the 0-360 degree range
  ---@param angle number The angle in degrees
  ---@param base number The base multiple to round the angle to
  ---@return number: The rounded angle, wrapped to the range [0, 360)
  function MathLib.roundAngleToMultiple(angle, base)
    return MathLib.roundToMultiple(angle, base) % 360
  end

  -- Rounds a number to a given number of decimal places
  ---@param vec tts__Vector The vector to round
  ---@param numDecimalPlaces? number The number of decimal places to round to (defaults to 0)
  ---@return tts__Vector: The rounded vector
  function MathLib.roundVector(vec, numDecimalPlaces)
    return Vector(
      MathLib.round(vec.x, numDecimalPlaces),
      MathLib.round(vec.y, numDecimalPlaces),
      MathLib.round(vec.z, numDecimalPlaces)
    )
  end

  -- Clamps a value between a minimum and maximum value
  ---@param val number The input value
  ---@param min number The minimum value
  ---@param max number The maximum value
  ---@return number: The clamped value
  function MathLib.clamp(val, min, max)
    return math.max(min, math.min(max, val))
  end

  -- Linearly interpolates between two points
  ---@param a number The start value
  ---@param b number The end value
  ---@param t number The interpolation factor (typically between 0 and 1)
  ---@return number: The interpolated value
  function MathLib.lerp(a, b, t)
    return a + (b - a) * t
  end

  return MathLib
end
